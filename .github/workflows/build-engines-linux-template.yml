name: Build Engines for Linux

on:
  workflow_call:
    inputs:
      commit:
        description: 'Commit on the given branch to build'
        type: string
        required: false

jobs:
  build:
    name: '${{ matrix.target.name }} for commit ${{ inputs.commit }}'
    # env:
    #   # default build config
    #   SQLITE_MAX_VARIABLE_NUMBER: 250000
    #   SQLITE_MAX_EXPR_DEPTH: 10000

    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        target:
          # Linux Glibc
          - name: 'rhel-openssl-1.0.x'
            image: 'prismagraphql/build:rhel-libssl1.0.x'
            target_string: ''
            target_path: ''
            features_string: '--features vendored-openssl'
          - name: 'rhel-openssl-1.1.x'
            image: 'prismagraphql/build:rhel-libssl1.1.x'
            target_string: ''
            target_path: ''
            features_string: ''
          - name: 'rhel-openssl-3.0.x'
            image: 'prismagraphql/build:rhel-libssl3.0.x'
            target_string: ''
            target_path: ''
            features_string: ''
          # Linux Musl
          - name: 'linux-musl'
            image: 'prismagraphql/build:alpine-libssl1.1.x'
            target_string: ''
            target_path: ''
            features_string: ''
          - name: 'linux-musl-openssl-3.0.x'
            image: 'prismagraphql/build:alpine-libssl3.0.x'
            target_string: ''
            target_path: ''
            features_string: ''
          # Linux Static x86_64
          # Note that the name should have "-static-"
          # Because we look for "-static-" later in the construct_build_command step
          - name: 'linux-static-x64'
            image: 'prismagraphql/build:linux-static-x64'
            target_string: '--target x86_64-unknown-linux-musl'
            target_path: 'x86_64-unknown-linux-musl'
            features_string: '--features vendored-openssl'
          # Linux Glibc ARM64
          - name: 'linux-arm64-openssl-1.0.x'
            image: 'prismagraphql/build:cross-linux-arm-ssl-1.0.x'
            target_string: '--target aarch64-unknown-linux-gnu'
            target_path: 'aarch64-unknown-linux-gnu'
            features_string: '--features vendored-openssl'
          - name: 'linux-arm64-openssl-1.1.x'
            image: 'prismagraphql/build:cross-linux-arm-ssl-1.1.x'
            target_string: '--target aarch64-unknown-linux-gnu'
            target_path: 'aarch64-unknown-linux-gnu'
            features_string: ''
          - name: 'linux-arm64-openssl-3.0.x'
            image: 'prismagraphql/build:cross-linux-arm-ssl-3.0.x'
            target_string: '--target aarch64-unknown-linux-gnu'
            target_path: 'aarch64-unknown-linux-gnu'
            features_string: ''
          # Linux Musl ARM64
          - name: 'linux-musl-arm64-openssl-1.1.x'
            image: 'prismagraphql/build:cross-linux-musl-arm-ssl-1.1.x'
            target_string: '--target aarch64-unknown-linux-musl'
            target_path: 'aarch64-unknown-linux-musl'
            features_string: ''
          - name: 'linux-musl-arm64-openssl-3.0.x'
            image: 'prismagraphql/build:cross-linux-musl-arm-ssl-3.0.x'
            target_string: '--target aarch64-unknown-linux-musl'
            target_path: 'aarch64-unknown-linux-musl'
            features_string: ''
          # Linux Static ARM64
          # Note that the name should have "-static-"
          # Because we look for "-static-" later in the construct_build_command step
          - name: 'linux-static-arm64'
            image: 'prismagraphql/build:linux-static-arm64'
            target_string: '--target aarch64-unknown-linux-musl'
            target_path: 'aarch64-unknown-linux-musl'
            features_string: '--features vendored-openssl'

    steps:
      - name: Output link to commit
        if: ${{ inputs.commit }}
        run: echo https://github.com/prisma/prisma-engines/commit/${{ inputs.commit }}

      - name: Checkout ${{ inputs.commit }}
        uses: actions/checkout@v4
        with:
          repository: prisma/prisma-engines
          ref: ${{ inputs.commit }}

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - uses: dtolnay/rust-toolchain@stable

      - name: Construct build command
        id: construct_build_command
        env:
          TARGET_NAME: ${{ matrix.target.name }}
          IMAGE: ${{ matrix.target.image }}
          TARGET_STRING: ${{ matrix.target.target_string }}
          FEATURES_STRING: ${{ matrix.target.features_string }}
        run: |
          set -eux;

          # full command
          command="docker run \
          -e SQLITE_MAX_VARIABLE_NUMBER=250000 \
          -e SQLITE_MAX_EXPR_DEPTH=10000 \
          -e LIBZ_SYS_STATIC=1 \
          -w /root/build \
          -v \"$(pwd)\":/root/build \
          $IMAGE \
          bash -c \
              \" \
              cargo clean \
              && cargo build --release -p query-engine          --manifest-path query-engine/query-engine/Cargo.toml          $TARGET_STRING $FEATURES_STRING \
              && cargo build --release -p query-engine-node-api --manifest-path query-engine/query-engine-node-api/Cargo.toml $TARGET_STRING $FEATURES_STRING \
              && cargo build --release -p schema-engine-cli     --manifest-path schema-engine/cli/Cargo.toml                  $TARGET_STRING $FEATURES_STRING \
              && cargo build --release -p prisma-fmt            --manifest-path prisma-fmt/Cargo.toml                         $TARGET_STRING $FEATURES_STRING \
              \" \
          "
          # remove query-engine-node-api for "static" targets
          if [[ "$TARGET_NAME" == *-static-* ]]; then
              substring_to_replace="&& cargo build --release -p query-engine-node-api --manifest-path query-engine/query-engine-node-api/Cargo.toml $TARGET_STRING $FEATURES_STRING"
              replacement_string=""
              command=$(echo "$command" | sed "s|$substring_to_replace|$replacement_string|")
          fi

          # store command in GitHub output
          echo "COMMAND=$command" >> "$GITHUB_OUTPUT"

      - name: Construct dummy build command
        # id: construct_build_command
        if: false
        env:
          TARGET_NAME: ${{ matrix.target.name }}
          IMAGE: ${{ matrix.target.image }}
          TARGET_STRING: ${{ matrix.target.target_string }}
          FEATURES_STRING: ${{ matrix.target.features_string }}
        run: |
          mkdir -p target/release && touch target/release/libquery_engine.dylib && touch target/release/schema-engine && touch target/release/query-engine && touch target/release/prisma-fmt

      - name: Show Build Command
        env:
          COMMAND: ${{ steps.construct_build_command.outputs.COMMAND }}"
        run: echo "Build command is $COMMAND"

      - name: Execute Build command
        run: ${{ steps.construct_build_command.outputs.command }}

      - name: Rename files
        if: ${{ matrix.target.target_path == '' }}
        working-directory: ${{ github.workspace }}/target/release/
        run: |
          mv libquery_engine.dylib libquery_engine.dylib.node

      # Upload for target "release"
      - uses: actions/upload-artifact@v4
        if: ${{ matrix.target.target_path == '' }}
        with:
          name: '${{ matrix.target.name }}'
          path: |
            ${{ github.workspace }}/target/release/libquery_engine.dylib
            ${{ github.workspace }}/target/release/schema-engine
            ${{ github.workspace }}/target/release/query-engine
            ${{ github.workspace }}/target/release/prisma-fmt

      - name: Rename files
        if: ${{ matrix.target.target_path != '' }}
        working-directory: ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release
        run: |
          mv libquery_engine.dylib libquery_engine.dylib.node

      # Upload for target from matrix
      - uses: actions/upload-artifact@v4
        if: ${{ matrix.target.target_path != '' }}
        with:
          name: ${{ matrix.target.name }}
          path: |
            ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/libquery_engine.dylib
            ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/schema-engine
            ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/query-engine
            ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/prisma-fmt
