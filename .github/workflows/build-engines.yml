name: Build Engines
run-name: Build Engines for ${{ github.event.inputs.commit }}
on:
  workflow_dispatch:
    inputs:
      commit:
        description: 'Commit to build (from prisma-engines)'
        required: false
        # TODO remove
        default: '6f3b8db04fa234ab2812fdd27456e9d9590eedb1'
  pull_request:

jobs:
  build-linux:
    name: '${{ matrix.target.name }} (on branch ${{ github.event.ref }} for commit ${{ github.event.inputs.commit }})'
    # env:
    #   # default build config
    #   SQLITE_MAX_VARIABLE_NUMBER: 250000
    #   SQLITE_MAX_EXPR_DEPTH: 10000

    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        target:
          # Linux Glibc
          - name: 'rhel-openssl-1.0.x'
            image: 'prismagraphql/build:rhel-libssl1.0.x'
            target_string: ''
            target_path: ''
            features_string: '--features vendored-openssl'
          # - name: 'rhel-openssl-1.1.x'
          #   image: 'prismagraphql/build:rhel-libssl1.1.x'
          #   target_string: ''
          #   target_path: ''
          #   features_string: ''
          # - name: 'rhel-openssl-3.0.x'
          #   image: 'prismagraphql/build:rhel-libssl3.0.x'
          #   target_string: ''
          #   target_path: ''
          #   features_string: ''
          # # Linux Musl
          # - name: 'linux-musl-openssl-1.1.x'
          #   image: 'prismagraphql/build:alpine-libssl1.1.x'
          #   target_string: ''
          #   target_path: ''
          #   features_string: ''
          # - name: 'linux-musl-openssl-3.0.x'
          #   image: 'prismagraphql/build:alpine-libssl3.0.x'
          #   target_string: ''
          #   target_path: ''
          #   features_string: ''
          # # Linux Static x86_64
          # - name: 'linux-static-x64'
          #   image: 'prismagraphql/build:linux-static-x64'
          #   target_string: '--target x86_64-unknown-linux-musl'
          #   target_path: 'x86_64-unknown-linux-musl'
          #   features_string: '--features vendored-openssl'
          # # Linux Glibc ARM64
          # - name: 'linux-arm64-openssl-1.0.x'
          #   image: 'prismagraphql/build:cross-linux-arm-ssl-1.0.x'
          #   target_string: '--target aarch64-unknown-linux-gnu'
          #   target_path: 'aarch64-unknown-linux-gnu'
          #   features_string: '--features vendored-openssl'
          # - name: 'linux-arm64-openssl-1.1.x'
          #   image: 'prismagraphql/build:cross-linux-arm-ssl-1.1.x'
          #   target_string: '--target aarch64-unknown-linux-gnu'
          #   target_path: 'aarch64-unknown-linux-gnu'
          #   features_string: ''
          # - name: 'linux-arm64-openssl-3.0.x'
          #   image: 'prismagraphql/build:cross-linux-arm-ssl-3.0.x'
          #   target_string: '--target aarch64-unknown-linux-gnu'
          #   target_path: 'aarch64-unknown-linux-gnu'
          #   features_string: ''
          # # Linux Musl ARM64
          # - name: 'linux-musl-arm64-openssl-1.1.x'
          #   image: 'prismagraphql/build:cross-linux-musl-arm-ssl-1.1.x'
          #   target_string: '--target aarch64-unknown-linux-musl'
          #   target_path: 'aarch64-unknown-linux-musl'
          #   features_string: ''
          # - name: 'linux-musl-arm64-openssl-3.0.x'
          #   image: 'prismagraphql/build:cross-linux-musl-arm-ssl-3.0.x'
          #   target_string: '--target aarch64-unknown-linux-musl'
          #   target_path: 'aarch64-unknown-linux-musl'
          #   features_string: ''
          # # Linux Static ARM64
          # - name: 'linux-static-arm64'
          #   image: 'prismagraphql/build:linux-static-arm64'
          #   target_string: '--target aarch64-unknown-linux-musl'
          #   target_path: 'aarch64-unknown-linux-musl'
          #   features_string: '--features vendored-openssl'

    steps:
      - name: Output link to commit
        if: ${{ github.event.inputs.commit }}
        run: echo https://github.com/prisma/prisma-engines/commit/${{ github.event.inputs.commit }}

      - name: Checkout ${{ github.event.inputs.commit }}
        uses: actions/checkout@v4
        with:
          repository: prisma/prisma-engines
          ref: ${{ github.event.inputs.commit }}

      - uses: dtolnay/rust-toolchain@stable

      # TODO proper way to do cache?
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target.name }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # - name: Construct build command
      #   id: construct_build_command
      #   env:
      #     TARGET_NAME: ${{ matrix.target.name }}
      #     IMAGE: ${{ matrix.target.image }}
      #     TARGET_STRING: ${{ matrix.target.target_string }}
      #     FEATURES_STRING: ${{ matrix.target.features_string }}
      #   run: |
      #     # full command
      #     command="docker run \
      #       -e SQLITE_MAX_VARIABLE_NUMBER=250000 \
      #       -e SQLITE_MAX_EXPR_DEPTH=10000 \
      #       -e LIBZ_SYS_STATIC=1 \
      #       -w /root/build \
      #       -v \"$(pwd)\":/root/build \
      #       $IMAGE \
      #       bash -c \
      #         \" \
      #         cargo clean \
      #         && cargo build --release -p query-engine          --manifest-path query-engine/query-engine/Cargo.toml          $TARGET_STRING $FEATURES_STRING \
      #         && cargo build --release -p query-engine-node-api --manifest-path query-engine/query-engine-node-api/Cargo.toml $TARGET_STRING $FEATURES_STRING \
      #         && cargo build --release -p schema-engine-cli     --manifest-path schema-engine/cli/Cargo.toml                  $TARGET_STRING $FEATURES_STRING \
      #         && cargo build --release -p prisma-fmt            --manifest-path prisma-fmt/Cargo.toml                         $TARGET_STRING $FEATURES_STRING \
      #         \" \
      #       "
      #     # remove query-engine-node-api for "static" targets
      #     if [[ "$TARGET_NAME" == *Static* ]]; then
      #       substring_to_replace="&& cargo build --release -p query-engine-node-api --manifest-path query-engine/query-engine-node-api/Cargo.toml $TARGET_STRING $FEATURES_STRING"
      #       replacement_string=""
      #       command=$(echo "$command" | sed "s|$substring_to_replace|$replacement_string|")
      #     fi
      #     # store command in github output
      #     echo "COMMAND=$command" >> "$GITHUB_OUTPUT"

      - name: Construct dummy build command
        id: construct_build_command
        env:
          TARGET_NAME: ${{ matrix.target.name }}
          IMAGE: ${{ matrix.target.image }}
          TARGET_STRING: ${{ matrix.target.target_string }}
          FEATURES_STRING: ${{ matrix.target.features_string }}
        run: |
          mkdir -p target/release && touch target/release/libquery_engine.dylib && touch target/release/schema-engine && touch target/release/query-engine && touch target/release/prisma-fmt

      - name: Show Build Command
        env:
          COMMAND: ${{ steps.construct_build_command.outputs.COMMAND }}"
        run: echo "Build command is $COMMAND"

      - name: Execute Build command
        run: ${{ steps.construct_build_command.outputs.command }}

      # Upload for target "release"
      - uses: actions/upload-artifact@v4
        if: ${{ matrix.target.target_path == '' }}
        with:
          name: Engine files ${{ matrix.target.name }}
          path: |
            ${{ github.workspace }}/target/release/libquery_engine.dylib
            ${{ github.workspace }}/target/release/schema-engine
            ${{ github.workspace }}/target/release/query-engine
            ${{ github.workspace }}/target/release/prisma-fmt

      # Upload for target from matrix
      - uses: actions/upload-artifact@v4
        if: ${{ matrix.target.target_path != '' }}
        with:
          name: engine-artifacts-${{ matrix.target.name }}
          path: |
            ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/libquery_engine.dylib
            ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/schema-engine
            ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/query-engine
            ${{ github.workspace }}/target/${{ matrix.target.target_path }}/release/prisma-fmt

  release-artifacts:
    name: 'Release artifacts from branch ${{ github.event.ref }} for commit ${{ github.event.inputs.commit }}'
    runs-on: ubuntu-22.04
    needs:
      - build-linux
      # TODO
    steps:
      # https://github.com/actions/download-artifact
      - uses: actions/download-artifact@v4
        with:
          path: engines-artifacts

      - name: Display structure of downloaded files
        run: ls -R engines-artifacts

      - name: 'TODO: Compressing binary files'
        run: |
          echo "TODO"

      - name: 'TODO: upload to S3 & R2'
        run: |
          echo "Upload"

      - name: 'TODO: verify uploaded files'
        run: |
          echo "Verify uploaded files"

      - name: 'TODO: Upload .finished marker file'
        run: |
          echo "Upload .finished marker file"
