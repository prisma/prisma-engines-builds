name: Build Engines
# run-name: Build Engines for ${{ inputs.commit }}
run-name: Build Engines for 6f3b8db04fa234ab2812fdd27456e9d9590eedb1
on:
  workflow_dispatch:
    inputs:
      commit:
        description: 'Commit to build (from prisma-engines)'
        required: false
  pull_request:

jobs:
  build-linux:
    name: Build Engines for Linux
    uses: ./.github/workflows/build-engines-linux-template.yml
    with:
      # commit: ${{ inputs.commit }}
      commit: 6f3b8db04fa234ab2812fdd27456e9d9590eedb1

  build-macos-intel:
    name: Build Engines for Apple Intel
    uses: ./.github/workflows/build-engines-apple-intel-template.yml
    with:
      # commit: ${{ inputs.commit }}
      commit: 6f3b8db04fa234ab2812fdd27456e9d9590eedb1

  build-macos-silicon:
    name: Build Engines for Apple Silicon
    uses: ./.github/workflows/build-engines-apple-silicon-template.yml
    with:
      # commit: ${{ inputs.commit }}
      commit: 6f3b8db04fa234ab2812fdd27456e9d9590eedb1

  build-react-native:
    name: Build Engines for React native
    uses: ./.github/workflows/build-engines-react-native-template.yml
    with:
      # commit: ${{ inputs.commit }}
      commit: 6f3b8db04fa234ab2812fdd27456e9d9590eedb1

  build-windows:
    name: Build Engines for Windows
    uses: ./.github/workflows/build-engines-windows-template.yml
    with:
      # commit: ${{ inputs.commit }}
      commit: 6f3b8db04fa234ab2812fdd27456e9d9590eedb1

  release-artifacts:
    # name: 'Release artifacts from branch ${{ github.event.ref }} for commit ${{ inputs.commit }}'
    name: 'Release artifacts from branch ${{ github.event.ref }} for commit 6f3b8db04fa234ab2812fdd27456e9d9590eedb1'
    runs-on: ubuntu-22.04
    # concurrency:
    # group: ${{ inputs.commit }}
    # TODO uncomment these lines after removing the harcoded run-id in the download-artifact step
    # needs:
    #   - build-linux
    #   - build-macos-intel
    #   - build-macos-silicon
    #   - build-react-native
    #   - build-windows

    env:
      BUCKET_NAME: 'prisma-builds-github-actions'
      # PRISMA_ENGINES_COMMIT_SHA: ${{ inputs.commit }}
      # DESTINATION_TARGET_PATH: 's3://prisma-builds-github-actions/all_commits/${{ inputs.commit }}'
      PRISMA_ENGINES_COMMIT_SHA: 6f3b8db04fa234ab2812fdd27456e9d9590eedb1
      DESTINATION_TARGET_PATH: 's3://prisma-builds-github-actions/all_commits/6f3b8db04fa234ab2812fdd27456e9d9590eedb1'

    steps:
      # Because we need the scripts
      - name: Checkout git repository
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: engines-artifacts
          # For debug purposes
          # A previous run ID can be specified, to avoid the build step
          # First disable the build step, then specify the run ID
          # The github-token is mandatory for this to work
          # https://github.com/prisma/prisma-engines-builds/actions/runs/9504695971
          # TODO comment out these 2 lines
          run-id: 9504695971
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: 'R2: Check if artifacts were already built and uploaded before via `.finished` file'
        env:
          # FILE_PATH: 'all_commits/${{ inputs.commit }}/.finished'
          FILE_PATH: 'all_commits/6f3b8db04fa234ab2812fdd27456e9d9590eedb1/.finished'
          AWS_DEFAULT_REGION: 'auto'
          AWS_ACCESS_KEY_ID: ${{ vars.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          AWS_ENDPOINT_URL_S3: ${{ vars.R2_ENDPOINT }}
        working-directory: .github/workflows/utils
        run: |
          # TODO remove
          aws s3 rm $DESTINATION_TARGET_PATH --recursive

          sh checkFinishedMarker.sh

      # - name: 'S3: Check if artifacts were already built and uploaded before via `.finished` file'
      #   env:
      #     # FILE_PATH: 'all_commits/${{ inputs.commit }}/.finished'
      #     FILE_PATH: 'all_commits/6f3b8db04fa234ab2812fdd27456e9d9590eedb1/.finished'
      #     AWS_DEFAULT_REGION: 'eu-west-1'
      #     AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #   run: sh utils/checkFinishedMarker.sh

      - name: Display structure of downloaded files
        run: ls -Rl engines-artifacts

      # TODO in a next major version of Prisma: remove this, and replace both `Debian` and `Rhel` with a single `LinuxGlibc`/`LinuxGnu` option.
      - name: Duplicate engines for debian
        working-directory: engines-artifacts
        run: |
          cp -r rhel-openssl-1.0.x debian-openssl-1.0.x
          cp -r rhel-openssl-1.1.x debian-openssl-1.1.x
          cp -r rhel-openssl-3.0.x debian-openssl-3.0.x

      - name: 'Create compressed engine files (.gz)'
        working-directory: engines-artifacts
        run: |
          set -eu

          find . -type f | while read filename; do
            gzip -c "$filename" > "$filename.gz"
            echo "$filename.gz file created."
          done

          ls -Rl .

      - name: 'Create SHA256 checksum files (.sha256).'
        working-directory: engines-artifacts
        run: |
          set -eu

          find . -type f | while read filename; do
            sha256sum "$filename" > "$filename.sha256" 
            echo "$filename.sha256 file created."
          done

          ls -Rl .

      # https://github.com/crazy-max/ghaction-import-gpg
      - name: Import GPG key
        # See https://github.com/crazy-max/ghaction-import-gpg/releases
        # v6 -> 01dd5d3ca463c7f10f7f4f7b4f177225ac661ee4
        # For security reasons, we should pin the version of the action
        uses: crazy-max/ghaction-import-gpg@01dd5d3ca463c7f10f7f4f7b4f177225ac661ee4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_KEY_PASSPHRASE }}

      - name: List keys
        run: gpg -K

      # next to each file (excluding .sha256 files)
      - name: 'Create a GPG detached signature (.sig)'
        working-directory: engines-artifacts
        run: |
          set -eu

          for file in $(find . -type f ! -name "*.sha256"); do
            gpg --detach-sign --armor --batch --output "${file#*/}.sig" "$file"
          done

          ls -Rl .

      - name: 'Cloudflare R2: Upload to bucket and verify uploaded files then create `.finished` file'
        # https://docs.aws.amazon.com/cli/v1/userguide/cli-configure-envvars.html
        env:
          AWS_DEFAULT_REGION: 'auto'
          AWS_ACCESS_KEY_ID: ${{ vars.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          AWS_ENDPOINT_URL_S3: ${{ vars.R2_ENDPOINT }}
        run: sh .github/workflows/utils/uploadAndVerify.sh engines-artifacts-from-r2

      # - name: 'AWS S3: Upload to bucket and verify uploaded files then create `.finished` file'
      #   env:
      #     AWS_DEFAULT_REGION: 'eu-west-1'
      #     AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #   working-directory: .github/workflows/utils
      #   run: sh uploadAndVerify.sh s3

      - name: Cleanup local directories
        run: rm -rf engines-artifacts engines-artifacts-from-r2 engines-artifacts-from-s3
